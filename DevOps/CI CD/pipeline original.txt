workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

variables:
  NETLIFY_SITE_ID: 'e880dc5c-b07c-4ca0-8387-b740e27e9bff'
  VITE_APP_VERSION: $CI_COMMIT_SHORT_SHA

stages:
  - build
  - test
  - deploy_review
  - post_deploy_review
  - deploy_staging
  - deploy_prod

build_website:
  image: node:22-alpine 
  stage: build
  script:
    - node --version
    - npm --version 
    - npm ci
    - npm run build
  artifacts:
    paths:
      - build/

test_artifact:
  image: alpine
  stage: test
  script:
    - test -f build/index.html

.unit_tests: 
  image: node:22-alpine 
  stage: test
  script: 
    - npm ci
    - npm test
  artifacts:
    when: always 
    reports:
      junit: ./reports/junit.xml

netlify_review:
  image: node:22-alpine 
  stage: deploy_review
  rules:
    - if: '$CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH'
  environment:
    name: preview/$CI_COMMIT_REF_SLUG
    url: $REVIEW_URL
  before_script:
    - npm install -g netlify-cli
    - apk add curl jq
  script:
    - netlify --version
    - netlify status 
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --dir build --json | tee deploy-result.json
    - REVIEW_URL=$(jq -r '.deploy_url' deploy-result.json)
    - echo $REVIEW_URL
    - curl $REVIEW_URL | grep 'GitLab' 
    - echo "REVIEW_URL=$REVIEW_URL" > deploy.env
    - cat deploy.env
  artifacts:
    reports:
      dotenv: deploy.env

aws_s3:
  image: 
    name: amazon/aws-cli:2.24.24
    entrypoint: [""]
  stage: deploy_review
  rules:
    - if: '$CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH'
  script: 
    - aws --version
    - aws s3 sync ./build/ s3://$AWS_S3_BUCKET

e2e:
  image: mcr.microsoft.com/playwright:v1.49.1-noble
  stage: post_deploy_review
  rules:
    - if: '$CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH'
  variables:
    APP_BASE_URL: $REVIEW_URL
  script:
    - npm ci 
    - npm run e2e 
  artifacts:
    when: always
    paths:
      - reports/
    reports: 
      junit: reports/playwright-junit.xml

netlify_staging:
  image: node:22-alpine 
  stage: deploy_staging
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
  environment:
    name: staging 
    #url: 'https://staging--learn-gitlab-demo.netlify.app/'
  before_script:
    - npm install -g netlify-cli
    - apk add curl
  script:
    - netlify --version
    - netlify status 
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --alias staging --dir build                                 # --site $NETLIFY_SITE_ID pt a specifica siteul pe care vrem sa il deployam
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'      # verificam daca siteul a fost deployat cu succes
  
netlify_prod:
  image: node:22-alpine 
  stage: deploy_prod
  when: manual 
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
  environment: production
  before_script:
    - npm install -g netlify-cli
    - apk add curl
  script:
    - netlify --version
    - netlify status 
    - echo "Deploying to site id $NETLIFY_SITE_ID"
    - netlify deploy --prod --dir build                                 # --site $NETLIFY_SITE_ID pt a specifica siteul pe care vrem sa il deployam
    - curl $CI_ENVIRONMENT_URL | grep 'GitLab'      # verificam daca siteul a fost deployat cu succes
    

  # dependencies:
  #   - build_website   // cu asta putem restrictiona de la care job-uri sa primeasca artifacts jobu nostru

 
#  In the above example, we have two stages:  build  and  test . The  build  stage builds the website and the  test  stage runs the tests. The  test  stage depends on the  build  stage. 
#  The  build_website  job uses the  node:22-alpine  image to build the website. The  test_artifact  job uses the same image to run the tests. 
#  The  build_website  job creates an artifact of the  build/  directory. The  test_artifact  job creates an artifact of the  coverage/  directory. 
#  The  test_artifact  job depends on the  build_website  job. This means that the  build_website  job will run first, and the  test_artifact  job will run only if the  build_website  job is successful. 
#  The  artifacts  keyword specifies the files that should be saved as artifacts. In this case, the  build_website  job saves the  build/  directory as an artifact, and the  test_artifact  job saves the  coverage/  directory as an artifact. 
#  Conclusion 
#  In this tutorial, we discussed how to use GitLab CI/CD to build and test a website. We covered the following topics: 
 
#  Setting up a GitLab CI/CD pipeline 
#  Creating a GitLab CI/CD configuration file 
#  Defining stages and jobs in a GitLab CI/CD configuration file 
#  Using Docker images in GitLab CI/CD jobs 
#  Running tests in GitLab CI/CD 
#  Saving artifacts in GitLab CI/CD 
 
#  GitLab CI/CD is a powerful tool that can help you automate your development workflow. By using GitLab CI/CD, you can build, test, and deploy your applications more efficiently. 
#  If you have any questions or feedback, feel free to leave a comment. 
#  Join our DigitalOcean community of over a million developers for free! Get help and share knowledge in our Questions & Answers section, find tutorials and tools that will help you grow as a developer and scale your project or business, and subscribe to topics of interest. 
#  GitLab CI/CD is a powerful
