# version is now using "compose spec"
# v2 and v3 are now combined!
# docker-compose v1.27+ required

services:
  vote:
    build: 
      context: ./vote
      target: dev
    depends_on:
      redis:
        condition: service_healthy
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
     - ./vote:/usr/local/app
    ports:
      - "8080:80"
    networks:
      - front-tier
      - back-tier

  result:
    build: ./result
    # use nodemon rather than node for local dev
    entrypoint: nodemon --inspect=0.0.0.0 server.js
    depends_on:
      db:
        condition: service_healthy 
    volumes:
      - ./result:/usr/local/app
    ports:
      - "8081:80"
      - "127.0.0.1:9229:9229"
    networks:
      - front-tier
      - back-tier

  worker:
    build:
      context: ./worker
    depends_on:
      redis:
        condition: service_healthy 
      db:
        condition: service_healthy 
    networks:
      - back-tier

  redis:
    image: redis:alpine
    volumes:
      - "./healthchecks:/healthchecks"
    healthcheck:
      test: /healthchecks/redis.sh
      interval: "5s"
    networks:
      - back-tier

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - "db-data:/var/lib/postgresql/data"
      - "./healthchecks:/healthchecks"
    healthcheck:
      test: /healthchecks/postgres.sh
      interval: "5s"
    networks:
      - back-tier

  # this service runs once to seed the database with votes
  # it won't run unless you specify the "seed" profile
  # docker compose --profile seed up -d
  seed:
    build: ./seed-data
    profiles: ["seed"]
    depends_on:
      vote:
        condition: service_healthy 
    networks:
      - front-tier
    restart: "no"
  
  prometheus:
    image: prom/prometheus 
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always 
    depends_on:
      - redis_exporter
      - postgres_exporter
      - cadvisor
  
  grafana: 
    image: grafana/grafana 
    container_name: grafana 
    ports:
      - "3000:3000"
    restart: always

  redis_exporter:
    image: oliver006/redis_exporter 
    container_name: redis_exporter 
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis:6379"
    restart: always 

  postgres_exporter:
    image: wrouesnel/postgres_exporter 
    container_name: postgres_exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@db:5432/postgres?sslmode=disable"
    restart: always

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest 
    container_name: cadvisor 
    ports: 
      - "8085:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys:/sys 
      - /var/lib/docker/:/var/lib/docker 
    restart: always


  # nginx: 
  #   image: nginx:latest
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - /etc/letsencrypt:/etc/letsencrypt
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   depends_on:
  #     - vote 
  #     - result
  #   networks:
  #     - front-tier
  #     - back-tier

volumes:
  db-data:

networks:
  front-tier:
  back-tier:
